*&---------------------------------------------------------------------*
*& Report ZEDR05_20230410
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZEDR05_20230410.

*"1.기본 READ 구문
*"당장 한건의 데이터만 보고싶을 때 READ TABLE 사용
*DATA : BEGIN OF GS_LINE,
*  CARRID TYPE SCARR-CARRID,
*  CARRNAME TYPE SCARR-CARRNAME,
*END OF GS_LINE.
*
*DATA : GT_LINE LIKE TABLE OF GS_LINE WITH NON-UNIQUE KEY CARRID.
*
*SELECT CARRID CARRNAME FROM SCARR
*  INTO CORRESPONDING FIELDS OF TABLE GT_LINE.
*
*BREAK-POINT.
*
*GS_LINE-CARRID = 'AA'.
*READ TABLE GT_LINE FROM GS_LINE INTO GS_LINE. "READ TABLE ITAB FROM WA INTO RESULT.
*IF SY-SUBRC = 0.
*  WRITE : / GS_LINE-CARRID, GS_LINE-CARRNAME.
*ELSE.
*  WRITE : / 'FAIL'.
*ENDIF.

*"2. TABLE KEY 사용
DATA : BEGIN OF GS_LINE,
  CARRID TYPE SCARR-CARRID,
  CARRNAME TYPE SCARR-CARRNAME,
END OF GS_LINE.

DATA : GT_LINE LIKE TABLE OF GS_LINE WITH NON-UNIQUE KEY CARRID.

SELECT CARRID CARRNAME FROM SCARR
  INTO CORRESPONDING FIELDS OF TABLE GT_LINE.

READ TABLE GT_LINE WITH TABLE KEY CARRID = 'AAz' INTO GS_LINE. "READ TABLE ITAB WITH TABLE KEY LOGIC INTO RESULT.
IF SY-SUBRC = 0.
  WRITE : / GS_LINE-CARRID, GS_LINE-CARRNAME.
ELSE.
  WRITE : / 'FAIL'.
ENDIF.

"3.WORK AREA 할당
*"3.1. 기본 WORK AREA 할당
*DATA : BEGIN OF GS_STUDENT,
*  ZCODE LIKE ZEDT05_001-ZCODE,
*  ZKNAME LIKE ZEDT05_001-ZKNAME,
*  ZTEL LIKE ZEDT05_001-ZTEL,
*  END OF GS_STUDENT.
*DATA : GT_STUDENT LIKE TABLE OF GS_STUDENT.
*
*DATA : BEGIN OF GS_TEL,
*  ZCODE LIKE ZEDT05_001-ZCODE,
*  ZTEL LIKE ZEDT05_001-ZTEL,
*  END OF GS_TEL.
*DATA : GT_TEL LIKE TABLE OF GS_TEL.
*
*CLEAR : GS_TEL, GS_STUDENT.
*
*GS_STUDENT-ZCODE = 'SSU-01'.
*GS_STUDENT-ZKNAME = '강동원'.
*APPEND GS_STUDENT TO GT_STUDENT.
*
*GS_TEL-ZCODE = 'SSU-01'.
*GS_TEL-ZTEL = '01012345678'.
*APPEND GS_TEL TO GT_TEL.
*
*CLEAR : GS_TEL, GS_STUDENT.
*
*LOOP AT GT_STUDENT INTO GS_STUDENT.
*  READ TABLE GT_TEL WITH KEY ZCODE = GS_STUDENT-ZCODE INTO GS_TEL.
*
*  GS_STUDENT-ZTEL = GS_TEL-ZTEL.
*  MODIFY GT_STUDENT FROM GS_STUDENT INDEX SY-TABIX.
*  CLEAR : GS_STUDENT, GS_TEL.
*
*ENDLOOP.

*"3.2. COMPARING 옵션
*DATA : BEGIN OF GS_STUDENT,
*  ZCODE LIKE ZEDT05_001-ZCODE,
*  ZKNAME LIKE ZEDT05_001-ZKNAME,
*  ZTEL LIKE ZEDT05_001-ZTEL,
*  END OF GS_STUDENT.
*DATA : GT_STUDENT LIKE TABLE OF GS_STUDENT.
*
*DATA : BEGIN OF GS_TEL,
*  ZCODE LIKE ZEDT05_001-ZCODE,
*  ZTEL LIKE ZEDT05_001-ZTEL,
*  END OF GS_TEL.
*DATA : GT_TEL LIKE TABLE OF GS_TEL.
*
*CLEAR : GS_TEL, GS_STUDENT.
*
*GS_STUDENT-ZCODE = 'SSU-01'.
*GS_STUDENT-ZKNAME = '강동원'.
*APPEND GS_STUDENT TO GT_STUDENT.
*
*GS_TEL-ZCODE = 'SSU-01'.
*GS_TEL-ZTEL = '01012345678'.
*APPEND GS_TEL TO GT_TEL.
*
*CLEAR : GS_TEL, GS_STUDENT.
*
*LOOP AT GT_STUDENT INTO GS_STUDENT.
*  MOVE-CORRESPONDING GS_STUDENT TO GS_TEL. "COMAPRING 을 하기 위해 값을 미리 채워 넣음.
*  READ TABLE GT_TEL WITH KEY ZCODE = GS_STUDENT-ZCODE INTO GS_TEL COMPARING ZCODE. "GT_TEL과 GS_TEL의 ZCODE를 COMARING함
*
*  IF SY-SUBRC = 0 .
*    GS_STUDENT-ZTEL = GS_TEL-ZTEL.
*  ENDIF.
*
*  MODIFY GT_STUDENT FROM GS_STUDENT INDEX SY-TABIX.
*  CLEAR : GS_STUDENT, GS_TEL.
*
*ENDLOOP.

*"3.3. TRANSPORTING 옵션
*DATA : BEGIN OF GS_STUDENT,
*  ZCODE LIKE ZEDT05_001-ZCODE,
*  ZKNAME LIKE ZEDT05_001-ZKNAME,
*  ZTEL LIKE ZEDT05_001-ZTEL,
*  END OF GS_STUDENT.
*DATA : GT_STUDENT LIKE TABLE OF GS_STUDENT.
*
*DATA : BEGIN OF GS_TEL,
*  ZCODE LIKE ZEDT05_001-ZCODE,
*  ZKNAME LIKE ZEDT05_001-ZKNAME,
*  ZTEL LIKE ZEDT05_001-ZTEL,
*  END OF GS_TEL.
*DATA : GT_TEL LIKE TABLE OF GS_TEL.
*
*CLEAR : GS_TEL, GS_STUDENT.
*
*GS_STUDENT-ZCODE = 'SSU-01'.
*GS_STUDENT-ZKNAME = '강동원'.
*APPEND GS_STUDENT TO GT_STUDENT.
*
*GS_TEL-ZCODE = 'SSU-01'.
*GS_TEL-ZKNAME = '강동원'.
*GS_TEL-ZTEL = '01012345678'.
*APPEND GS_TEL TO GT_TEL.
*
*CLEAR : GS_TEL, GS_STUDENT.
*
*LOOP AT GT_STUDENT INTO GS_STUDENT.
*  READ TABLE GT_TEL WITH KEY ZCODE = GS_STUDENT-ZCODE INTO GS_TEL TRANSPORTING ZTEL.
*
*  IF SY-SUBRC = 0 .
*    GS_STUDENT-ZTEL = GS_TEL-ZTEL.
*  ENDIF.
*
*  MODIFY GT_STUDENT FROM GS_STUDENT INDEX SY-TABIX.
*  CLEAR : GS_STUDENT, GS_TEL.
*
*ENDLOOP.

*"4. INDEX
*DATA : BEGIN OF GS_STUDENT,
*  ZCODE LIKE ZEDT05_001-ZCODE,
*  ZKNAME LIKE ZEDT05_001-ZKNAME,
*  ZTEL LIKE ZEDT05_001-ZTEL,
*  END OF GS_STUDENT.
*DATA : GT_STUDENT LIKE TABLE OF GS_STUDENT.
*
*DATA : BEGIN OF GS_TEL,
*  ZCODE LIKE ZEDT05_001-ZCODE,
*  ZKNAME LIKE ZEDT05_001-ZKNAME,
*  ZTEL LIKE ZEDT05_001-ZTEL,
*  END OF GS_TEL.
*DATA : GT_TEL LIKE TABLE OF GS_TEL.
*
*CLEAR : GS_TEL, GS_STUDENT.
*
*GS_STUDENT-ZCODE = 'SSU-01'.
*GS_STUDENT-ZKNAME = '강동원'.
*APPEND GS_STUDENT TO GT_STUDENT.
*
*GS_TEL-ZCODE = 'SSU-01'.
*GS_TEL-ZTEL = '01012345678'.
*APPEND GS_TEL TO GT_TEL.
*
*CLEAR : GS_TEL, GS_STUDENT.
*
*LOOP AT GT_STUDENT INTO GS_STUDENT.
*  CLEAR : GS_TEL.
*  READ TABLE GT_TEL INTO GS_TEL INDEX SY-TABIX.
*
*  IF SY-SUBRC = 0 .
*    GS_STUDENT-ZTEL = GS_TEL-ZTEL.
*  ENDIF.
*
*  MODIFY GT_STUDENT FROM GS_STUDENT INDEX SY-TABIX.
*  CLEAR : GS_STUDENT, GS_TEL.
*
*ENDLOOP.

"5. READ BINARY SEARCH
*DATA : BEGIN OF GS_LINE,
*  CARRID TYPE SFLIGHT-CARRID,
*  CONNID TYPE SFLIGHT-CONNID,
*  CARRNAME TYPE SCARR-CARRNAME,
*END OF GS_LINE.
*
*DATA : GT_SFLIGHT LIKE TABLE OF GS_LINE.
*DATA : GT_SCARR LIKE TABLE OF GS_LINE WITH HEADER LINE.
*
*SELECT CARRID CONNID FROM SFLIGHT
*  INTO CORRESPONDING FIELDS OF TABLE GT_SFLIGHT.
*SELECT CARRID CARRNAME FROM SCARR
*  INTO CORRESPONDING FIELDS OF TABLE GT_SCARR.
*
*DELETE ADJACENT DUPLICATES FROM GT_SFLIGHT.
*DELETE ADJACENT DUPLICATES FROM GT_SCARR.
*
*LOOP AT GT_SFLIGHT INTO GS_LINE.
*  READ TABLE GT_SCARR WITH KEY CARRID = GS_LINE-CARRID BINARY SEARCH.
*  GS_LINE-CARRNAME = GT_SCARR-CARRNAME.
*
*  MODIFY GT_SFLIGHT FROM GS_LINE.
*  WRITE : / GS_LINE-CARRID , GS_LINE-CARRNAME.
*
*ENDLOOP.