*&---------------------------------------------------------------------*
*& Report ZEDR05_20230406
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZEDR05_20230406.


"1. LOOP를 통한 라인 삭제
*data : BEGIN OF GS_STUDENT,
*  ZCODE TYPE C LENGTH 10,
*  ZKNAME TYPE C LENGTH 10,
*  ZENAME TYPE C LENGTH 10,
*  ZGUBUN TYPE C,
*  ZGNAME TYPE C LENGTH 10,
*END OF GS_STUDENT.
*DATA : GT_STUDENT LIKE TABLE OF GS_STUDENT.
*
*CLEAR : GS_STUDENT.
*GS_STUDENT-ZCODE = 'SSU-01'.
*GS_STUDENT-ZKNAME = '강동원'.
*GS_STUDENT-ZENAME = 'DONG'.
*GS_STUDENT-ZGUBUN = 'M'.
*APPEND GS_STUDENT TO GT_STUDENT.
*
*CLEAR : GS_STUDENT.
*GS_STUDENT-ZCODE = 'SSU-02'.
*GS_STUDENT-ZKNAME = '이제훈'.
*GS_STUDENT-ZENAME = 'LEE'.
*GS_STUDENT-ZGUBUN = 'M'.
*APPEND GS_STUDENT TO GT_STUDENT.
*
*CLEAR : GS_STUDENT.
*GS_STUDENT-ZCODE = 'SSU-03'.
*GS_STUDENT-ZKNAME = '손예진'.
*GS_STUDENT-ZENAME = 'SON'.
*GS_STUDENT-ZGUBUN = 'F'.
*APPEND GS_STUDENT TO GT_STUDENT.
*
*CLEAR : GS_STUDENT.
*
*LOOP AT GT_STUDENT INTO GS_STUDENT.
*  BREAK-POINT.
*  IF GS_STUDENT-ZGUBUN NE 'M'.
*   DELETE TABLE GT_STUDENT FROM GS_STUDENT.
*  ENDIF.
*  CLEAR GS_STUDENT.
*ENDLOOP.
*
*BREAK-POINT.

*"TABLE KEY를 이용한 라인 삭제
*"테이블 생성 시, 테이블의 ZGUBUN값을 키값으로 설정한다.
*
*data : BEGIN OF GS_STUDENT,
*  ZCODE TYPE C LENGTH 10,
*  ZKNAME TYPE C LENGTH 10,
*  ZENAME TYPE C LENGTH 10,
*  ZGUBUN TYPE C,
*  ZGNAME TYPE C LENGTH 10,
*END OF GS_STUDENT.
*DATA : GT_STUDENT LIKE TABLE OF GS_STUDENT WITH NON-UNIQUE KEY ZGUBUN.
*
*CLEAR : GS_STUDENT.
*GS_STUDENT-ZCODE = 'SSU-01'.
*GS_STUDENT-ZKNAME = '강동원'.
*GS_STUDENT-ZENAME = 'DONG'.
*GS_STUDENT-ZGUBUN = 'M'.
*APPEND GS_STUDENT TO GT_STUDENT.
*
*CLEAR : GS_STUDENT.
*GS_STUDENT-ZCODE = 'SSU-02'.
*GS_STUDENT-ZKNAME = '이제훈'.
*GS_STUDENT-ZENAME = 'LEE'.
*GS_STUDENT-ZGUBUN = 'M'.
*APPEND GS_STUDENT TO GT_STUDENT.
*
*CLEAR : GS_STUDENT.
*GS_STUDENT-ZCODE = 'SSU-03'.
*GS_STUDENT-ZKNAME = '손예진'.
*GS_STUDENT-ZENAME = 'SON'.
*GS_STUDENT-ZGUBUN = 'F'.
*APPEND GS_STUDENT TO GT_STUDENT.
*
*CLEAR : GS_STUDENT.
*
*BREAK-POINT.
*
*DELETE TABLE GT_STUDENT WITH TABLE KEY ZGUBUN = 'M'.
*
*BREAK-POINT.


*"3. WHERE조건을 이용해 라인 삭제
*data : BEGIN OF GS_STUDENT,
*  ZCODE TYPE C LENGTH 10,
*  ZKNAME TYPE C LENGTH 10,
*  ZENAME TYPE C LENGTH 10,
*  ZGUBUN TYPE C,
*  ZGNAME TYPE C LENGTH 10,
*END OF GS_STUDENT.
*DATA : GT_STUDENT LIKE TABLE OF GS_STUDENT .
*
*CLEAR : GS_STUDENT.
*GS_STUDENT-ZCODE = 'SSU-01'.
*GS_STUDENT-ZKNAME = '강동원'.
*GS_STUDENT-ZENAME = 'DONG'.
*GS_STUDENT-ZGUBUN = 'M'.
*APPEND GS_STUDENT TO GT_STUDENT.
*
*CLEAR : GS_STUDENT.
*GS_STUDENT-ZCODE = 'SSU-02'.
*GS_STUDENT-ZKNAME = '이제훈'.
*GS_STUDENT-ZENAME = 'LEE'.
*GS_STUDENT-ZGUBUN = 'M'.
*APPEND GS_STUDENT TO GT_STUDENT.
*
*CLEAR : GS_STUDENT.
*GS_STUDENT-ZCODE = 'SSU-03'.
*GS_STUDENT-ZKNAME = '손예진'.
*GS_STUDENT-ZENAME = 'SON'.
*GS_STUDENT-ZGUBUN = 'F'.
*APPEND GS_STUDENT TO GT_STUDENT.
*
*BREAK-POINT.
*
*DELETE GT_STUDENT WHERE ZGUBUN ='F'.
*
*BREAK-POINT.

*"4. INDEX를 이용해 라인 삭제
*data : BEGIN OF GS_STUDENT,
*  ZCODE TYPE C LENGTH 10,
*  ZKNAME TYPE C LENGTH 10,
*  ZENAME TYPE C LENGTH 10,
*  ZGUBUN TYPE C,
*  ZGNAME TYPE C LENGTH 10,
*END OF GS_STUDENT.
*DATA : GT_STUDENT LIKE TABLE OF GS_STUDENT .
*
*CLEAR : GS_STUDENT.
*GS_STUDENT-ZCODE = 'SSU-01'.
*GS_STUDENT-ZKNAME = '강동원'.
*GS_STUDENT-ZENAME = 'DONG'.
*GS_STUDENT-ZGUBUN = 'M'.
*APPEND GS_STUDENT TO GT_STUDENT.
*
*CLEAR : GS_STUDENT.
*GS_STUDENT-ZCODE = 'SSU-02'.
*GS_STUDENT-ZKNAME = '이제훈'.
*GS_STUDENT-ZENAME = 'LEE'.
*GS_STUDENT-ZGUBUN = 'M'.
*APPEND GS_STUDENT TO GT_STUDENT.
*
*CLEAR : GS_STUDENT.
*GS_STUDENT-ZCODE = 'SSU-03'.
*GS_STUDENT-ZKNAME = '손예진'.
*GS_STUDENT-ZENAME = 'SON'.
*GS_STUDENT-ZGUBUN = 'F'.
*APPEND GS_STUDENT TO GT_STUDENT.
*
*BREAK-POINT.
*
*DELETE GT_STUDENT INDEX 2.
*DELETE GT_STUDENT FROM 2 TO 3.
*DELETE GT_STUDENT FROM 2."2포함 끝까지 삭제
*DELETE GT_STUDENT TO 3."1,2 삭제
*
*BREAK-POINT.

*5. ADJACENT DUPLICATE 구문을 이용해 중복 라인 삭제
*data : BEGIN OF GS_STUDENT,
*  ZCODE TYPE C LENGTH 10,
*  ZKNAME TYPE C LENGTH 10,
*  ZENAME TYPE C LENGTH 10,
*  ZGUBUN TYPE C,
*  ZGNAME TYPE C LENGTH 10,
*END OF GS_STUDENT.
*DATA : GT_STUDENT LIKE TABLE OF GS_STUDENT .
*
*CLEAR : GS_STUDENT.
*GS_STUDENT-ZCODE = 'SSU-01'.
*GS_STUDENT-ZKNAME = '강동원'.
*GS_STUDENT-ZENAME = 'DONG'.
*GS_STUDENT-ZGUBUN = 'M'.
*APPEND GS_STUDENT TO GT_STUDENT.
*
*CLEAR : GS_STUDENT.
*GS_STUDENT-ZCODE = 'SSU-01'.
*GS_STUDENT-ZKNAME = '강동원'.
*GS_STUDENT-ZENAME = 'DONG'.
*GS_STUDENT-ZGUBUN = 'M'.
*APPEND GS_STUDENT TO GT_STUDENT.
*
*SORT GT_STUDENT. "DUPLICATE 구문에서는 SORT 필수!
*
*BREAK-POINT.
*
*DELETE ADJACENT DUPLICATES FROM GT_STUDENT. "모든 필드값이 같아야 중복으로 판단하고 제거함.
*
*BREAK-POINT.

"5.1. 만약 모든 필드값이 같진 않지만 필드 ADJACENT DUPLICATE 구문을 이용해 중복 라인 삭제
data : BEGIN OF GS_STUDENT,
  ZCODE TYPE C LENGTH 10,
  ZKNAME TYPE C LENGTH 10,
  ZENAME TYPE C LENGTH 10,
  ZGUBUN TYPE C,
  ZGNAME TYPE C LENGTH 10,
END OF GS_STUDENT.
DATA : GT_STUDENT LIKE TABLE OF GS_STUDENT .

CLEAR : GS_STUDENT.
GS_STUDENT-ZCODE = 'SSU-01'.
GS_STUDENT-ZKNAME = '강동원'.
GS_STUDENT-ZENAME = 'DONG'.
GS_STUDENT-ZGUBUN = 'M'.
APPEND GS_STUDENT TO GT_STUDENT.

CLEAR : GS_STUDENT.
GS_STUDENT-ZCODE = 'SSU-01'.
GS_STUDENT-ZKNAME = '강똥원'.
GS_STUDENT-ZENAME = 'DONG'.
GS_STUDENT-ZGUBUN = 'M'.
APPEND GS_STUDENT TO GT_STUDENT.

CLEAR : GS_STUDENT.
GS_STUDENT-ZCODE = 'SSU-01'.
GS_STUDENT-ZKNAME = '강동원'.
GS_STUDENT-ZENAME = 'DONG'.
GS_STUDENT-ZGUBUN = 'F'.
APPEND GS_STUDENT TO GT_STUDENT.

CLEAR : GS_STUDENT.
GS_STUDENT-ZCODE = 'SSU-01'.
GS_STUDENT-ZKNAME = '강동원'.
GS_STUDENT-ZENAME = 'DONG'.
GS_STUDENT-ZGUBUN = 'M'.
APPEND GS_STUDENT TO GT_STUDENT.

CLEAR : GS_STUDENT.
GS_STUDENT-ZCODE = 'SSU-01'.
GS_STUDENT-ZKNAME = '강동원'.
GS_STUDENT-ZENAME = 'DONG'.
GS_STUDENT-ZGUBUN = 'A'.
APPEND GS_STUDENT TO GT_STUDENT.



SORT GT_STUDENT. "DUPLICATE 구문에서는 SORT 필수!

BREAK-POINT.

DELETE ADJACENT DUPLICATES FROM GT_STUDENT COMPARING ZGUBUN .

BREAK-POINT.